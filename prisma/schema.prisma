generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  
}

model Account {
  id                        String  @id @default(cuid())
  userId                    String  @map("user_id")
  type                      String
  provider                  String
  providerAccountId         String  @map("provider_account_id")
  refresh_token             String? @db.Text
  refresh_token_expires_in  Int?
  access_token              String? @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? @db.Text
  session_state             String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model User {
  id             String     @id @default(uuid())
  email          String?     @unique
  name           String?
  image          String?
  description    String?
  emailVerified  Boolean?
  rooms          Room[]
  accounts       Account[]
  phone          String?
  address        String?
  sessions       Session[]
  likes          Like[]
  bookings       Booking[]
  comments       Comment[]
}

model Comment {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  userId         String
  roomId         Int
  body           String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  room           Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  @@index([userId, roomId])
}

model Like {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  userId         String
  roomId         Int
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  room           Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Room {
  id                    Int         @id @default(autoincrement())
  title                 String
  images                String[]
  address               String
  lat                   String      // 위도
  lng                   String      // 경도
  category              String
  description           String
  price                 Int
  bedroomDescription    String?
  freeCancel            Boolean     @default(false)
  selfCheckIn           Boolean     @default(false)
  officeSpace           Boolean     @default(false)
  hasMountainView       Boolean     @default(false)
  hasShampoo            Boolean     @default(false)
  hasFreeLaundry        Boolean     @default(false)
  hasAirCondition       Boolean     @default(false)
  hasFreeWifi           Boolean     @default(false)
  hasBarbecue           Boolean     @default(false)
  hasFreeParking        Boolean     @default(false)
  userId                String?
  createdAt             DateTime    @default(now())
  likes                 Like[]
  bookings              Booking[]
  user                  User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments              Comment[]
  @@index([userId])
}

model Faq {
  id             Int         @id @default(autoincrement())
  title          String
  description    String
}

model Booking {
  id             Int         @id @default(autoincrement())
  checkIn        DateTime
  checkOut       DateTime
  guestCount     Int
  totalDays      Int
  totalAmount    Int
  roomId         Int
  userId         String
  room           Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
  status         BookingStatus
} 

enum BookingStatus {
  SUCCESS
  CANCEL  
}